"Install vim-plug if not already
if empty(glob('~/.vim/autoload/plug.vim'))
    echo "Installing VimPlug..."
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall
endif 

" Plugin
call plug#begin('~/.vim/plugged')
Plug 'itchyny/lightline.vim'
Plug 'scrooloose/nerdtree'
Plug 'airblade/vim-gitgutter'
Plug 'iamcco/markdown-preview.vim'
Plug 'sstallion/vim-cursorline'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'sudar/comments.vim'
Plug 'tpope/vim-fugitive'
Plug 'terryma/vim-multiple-cursors'
Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' } 
Plug 'mengelbrecht/lightline-bufferline'
Plug 'pearofducks/ansible-vim'
Plug 'Yggdroot/indentLine'
Plug 'hashivim/vim-terraform'
Plug 'vim-syntastic/syntastic'
Plug 'juliosueiras/vim-terraform-completion'
" Theme
Plug 'ayu-theme/ayu-vim'
call plug#end()

" ligthtline config
let g:lightline = {
	\ 'colorscheme': 'ayu',
	\ 'separator': { 'left': '', 'right': '' },
	\ 'subseparator': { 'left': '', 'right': '' },
	\ 'active': {
	\   'left': [ [ 'mode', 'paste' ],
	\             [ 'gitbranch', 'readonly', 'filename', 'modified' ] ]
	\ },
	\ 'component_function': {
	\   'gitbranch': 'FugitiveHead'
 	\ },
	\ 'tabline': {
	\   'left': [ ['buffers'] ],
	\   'right': [ ['close'] ]
	\ },
	\ 'component_expand': {
	\   'buffers': 'lightline#bufferline#buffers'
	\ },
	\ 'component_type': {
	\   'buffers': 'tabsel'
 	\ }
\}

" lightline-bufferline config
let g:lightline#bufferline#unnamed      = '[No Name]'
let g:lightline#bufferline#show_number  = 2

set showtabline=2
set guioptions-=e

" Start NERDTree if vim is call without args
autocmd VimEnter * if !argc() | NERDTree | endif

" Set lightline
set laststatus=2

" Set line number and color 
set number
highlight LineNr ctermfg=DarkGrey

" Set cursorline and color 
set cursorline
highlight CursorLineNr ctermfg=DarkGrey

" Color syntax
syntax on

" Configure ayucolors theme
set termguicolors
let ayucolor="dark" 
colorscheme ayu

" Set Leader key
let mapleader = ","

" Move between buffer
nmap <Leader>1 <Plug>lightline#bufferline#go(1)
nmap <Leader>2 <Plug>lightline#bufferline#go(2)
nmap <Leader>3 <Plug>lightline#bufferline#go(3)
nmap <Leader>4 <Plug>lightline#bufferline#go(4)
nmap <Leader>5 <Plug>lightline#bufferline#go(5)
nmap <Leader>6 <Plug>lightline#bufferline#go(6)
nmap <Leader>7 <Plug>lightline#bufferline#go(7)
nmap <Leader>8 <Plug>lightline#bufferline#go(8)
nmap <Leader>9 <Plug>lightline#bufferline#go(9)
nmap <Leader>0 <Plug>lightline#bufferline#go(10)
map <Leader>n :bn<cr>
map <Leader>p :bp<cr>
" Close buffer
map <Leader>d :bd<cr>  

" Copy current line without \n
nnoremap <Leader>y 0vg_y

" Moving line or block of line 
map <Esc>k <A-k>
map <Esc>j <A-j>
nnoremap <A-j> :m .+1<CR>==
nnoremap <A-k> :m .-2<CR>==
inoremap <A-j> <Esc>:m .+1<CR>==gi
inoremap <A-k> <Esc>:m .-2<CR>==gi
vnoremap <A-j> :m '>+1<CR>gv=gv
vnoremap <A-k> :m '<-2<CR>gv=gv

" Inserts blank lines after or before current line.
nnoremap <C-j> :set paste<CR>m`o<Esc>``:set nopaste<CR>
nnoremap <C-k> :set paste<CR>m`O<Esc>``:set nopaste<CR>

" Delete blank lines after of before current line.
nnoremap <C-h> m`:silent +g/\m^\s*$/d<CR>``:noh<CR>
nnoremap <C-l> m`:silent -g/\m^\s*$/d<CR>``:noh<CR>

" Add single char in normal mode 
nnoremap <Space> i_<Esc>r

" Disables the directional arrows 
noremap <Up> <NOP>
noremap <Down> <NOP>
noremap <Left> <NOP>
noremap <Right> <NOP>
inoremap <Up> <NOP>
noremap <Down> <NOP>
inoremap <Left> <NOP>

" Edit ~/.vimrc 
nnoremap ve :e $MYVIMRC<CR>
" Reload ~/.vimrc 
nnoremap vr :source $MYVIMRC<CR> 

" Map FZF to CTRL-p
nnoremap <C-p> :FZF<CR>

" Map MarkdownPreview to CTRL-m
nnoremap <C-m> :MarkdownPreview<CR>

" yaml configuration
autocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab
let g:indentLine_char = '⦙'
